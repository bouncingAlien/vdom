{"version":3,"sources":["vdom/createElement.js","vdom/render.js","vdom/mount.js","vdom/diff.js","main.js"],"names":["tagName","attr","children","renderElement","$el","document","createElement","Object","entries","key","value","setAttribute","child","$child","render","appendChild","vNode","createTextNode","$node","$target","replaceWith","zipp","xs","ys","zipped","i","Math","min","length","push","diffAttributes","oldAttr","newAttr","patches","removeAttribute","patch","diffChildren","oldChildren","newChildren","childPatches","oldChild","newChild","diff","additionalPatches","additionalChild","slice","$parent","childNodes","vOldNode","vNewNode","undefined","remove","$newNode","patchAttr","patchChildren","createVApp","count","id","dataCount","String","src","vApp","$app","$rootElement","getElementById","setInterval","vNewApp","console","log"],"mappings":"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","file":"main.1f19ae8e.map","sourceRoot":"../src","sourcesContent":["export default (tagName, { attr = {}, children = [] } = {} ) => {\n    return {\n        tagName,\n        attr,\n        children,\n    };\n};","const renderElement = ({ tagName, attr, children }) => {\n    const $el = document.createElement(tagName);\n\n    // set attributes\n    for(const [key, value] of Object.entries(attr)){\n        $el.setAttribute(key, value);\n    }\n\n    // set children\n    for( const child of children){\n        const $child = render(child);\n        $el.appendChild($child);\n    }\n\n    return $el;\n};\n\nconst render = (vNode) => {\n    if (typeof vNode === 'string') return document.createTextNode(vNode);\n    return renderElement(vNode);\n}\n\nexport default render;","export default ($node, $target) => {\n    $target.replaceWith($node);\n    return $node;\n}","import render from './render';\n\nconst zipp = (xs, ys) => {\n    const zipped = [];\n    for(let i = 0; i < Math.min(xs.length, ys.length); i++){\n        zipped.push([xs[i], ys[i]]);\n    };\n    return zipped;\n}\n\nconst diffAttributes = (oldAttr, newAttr) => {\n    const patches = [];\n    // set new atributes\n    for (const [key, value] of Object.entries(newAttr)){\n        patches.push($node => {\n            $node.setAttribute(key, value);\n            return $node;\n        });\n    };\n    // remove old atributes\n    for(const [key, value] of Object.entries(oldAttr)){\n        if(!(key in newAttr)){\n            $node.removeAttribute(key);\n            return $node;\n        }\n    }\n    // return\n    return $node => {\n        for (const patch of patches){\n            patch($node);\n        }\n    }\n}\n\nconst diffChildren = (oldChildren, newChildren) => {\n    const childPatches = [];\n    for (const [oldChild, newChild] of zipp(oldChildren, newChildren)) {\n        childPatches.push(diff(oldChild, newChild));\n    };\n\n    const additionalPatches = [];\n    for(const additionalChild of newChildren.slice(oldChildren.length)){\n        additionalPatches.push( $node => {\n            $node.appendChild(render(additionalChild));\n            return $node;\n        });\n    }\n\n    return $parent => {\n        for(const [patch, child] of zipp(childPatches, $parent.childNodes)){\n            patch(child);\n        }\n        for(const patch of additionalPatches){\n            patch($parent);\n        }\n        return $parent;\n    }\n}\n\nconst diff = (vOldNode, vNewNode) => {\n    if(vNewNode === undefined) {\n        return $node => {\n            $node.remove();\n            return undefined;\n        }\n    };\n\n    // handle text nodes\n    if(typeof vOldNode === 'string' || typeof vNewNode === 'string'){\n        if(vOldNode !== vNewNode){\n            return $node => {\n                const $newNode = render(vNewNode);\n                $node.replaceWith($newNode);\n                return $newNode;\n            }\n        } else {\n            return $node => {}\n        }\n    }\n\n    // handle element nodes\n    if(vOldNode.tagName !== vNewNode.tagName) {\n        return $node => {\n            const $newNode = render(vNewNode);\n            $node.replaceWith($newNode);\n            return $newNode;\n        }\n    };\n\n    const patchAttr = diffAttributes(vOldNode.attr, vNewNode.attr);\n\n    const patchChildren = diffChildren(vOldNode.children, vNewNode.children);\n    \n    return $node => {\n        patchAttr($node);\n        patchChildren($node);\n        return $node;\n    };\n}\n\nexport default diff;","import createElement from './vdom/createElement';\nimport render from './vdom/render';\nimport mount from './vdom/mount';\nimport diff from './vdom/diff';\n\nconst createVApp = (count) => createElement('div', {\n    attr: {\n        id: 'app',\n        dataCount: count\n    },\n    children: [\n        String(count),\n        createElement('img', {\n            attr: {\n                src: 'https://media.giphy.com/media/3NtY188QaxDdC/giphy.gif'\n            }\n        }),\n        createElement('input')\n    ]\n});\n\nlet count = 0;\nlet vApp = createVApp(count);\n\nconst $app = render(vApp);\nlet $rootElement = mount($app, document.getElementById('root'));\n\nsetInterval(() => {\n    count++;\n    const vNewApp = createVApp(count);\n    const patch = diff(vApp, vNewApp);\n    $rootElement = patch($rootElement);\n    vApp = vNewApp;\n}, 1000);\n\nconsole.log($app);"]}